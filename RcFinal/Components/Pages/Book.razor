@page "/book"
@layout Layout.HotelLayout

@using Microsoft.AspNetCore.Authorization
@using RcFinal.Models
@using System.Security.Claims
@inject ReservasService ReservasService
@inject AuthenticationStateProvider AuthStateProvider

@attribute [Authorize]

<div class="booking-form">
    <h3>Booking Your Hotel</h3>
    <EditForm Model="reserva" OnValidSubmit="HandleValidSubmit" FormName="ReservaForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="check-date">
            <label for="date-in">Check In:</label>
            <InputDate @bind-Value="reserva.CheckIn" id="date-in" class="form-control" />
        </div>

        <div class="check-date">
            <label for="date-out">Check Out:</label>
            <InputDate @bind-Value="reserva.CheckOut" id="date-out" class="form-control" />
        </div>

        <div class="select-option mb-3">
            <label for="guest">Guests:</label>
            <InputNumber @bind-Value="reserva.Guests"
                         id="guest"
                         class="form-control"
                         min="1"
                         max="5" />
            <ValidationMessage For="@(() => reserva.Guests)" />
        </div>

        <div class="mb-3">
            <label for="package">Package:</label>
            <select id="package" class="form-control" @onchange="OnPackageChanged">
                <option value="">-- Select a package --</option>
                @foreach (var pkg in packages)
                {
                    <option value="@pkg.Name">@pkg.Name (@pkg.PricePerNightPerGuest € / night / guest)</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Book now</button>
    </EditForm>
</div>

@code {
    private string? errorMessage;
    private List<Package> packages = new();
    private List<Quartos> rooms = new();
    private int selectedRoomId = -1;
    private Reservas reserva = new()
        {
            CheckIn = DateTime.Today,
            CheckOut = DateTime.Today.AddDays(1),
            Guests = 1,
        };
    private string pkgName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        rooms = (await ReservasService.GetQuartosAsync()).ToList();
        packages = (await ReservasService.GetPackagesAsync()).ToList();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            reserva.Email = user.FindFirst(ClaimTypes.Email)?.Value
                                 ?? user.Identity.Name
                                 ?? throw new InvalidOperationException("Authenticated user has no email claim.");
        }
    }
    private void OnPackageChanged(ChangeEventArgs e)
    {
        pkgName = e.Value?.ToString();
    }


    private async Task AutoAssignRoom()
    {
        var candidates = rooms
            .Where(r => r.Capacidade == reserva.Guests)
            .OrderBy(r => r.Capacidade);

        foreach (var room in candidates)
        {
            var test = new Reservas
                {
                    CheckIn = reserva.CheckIn,
                    CheckOut = reserva.CheckOut,
                    Guests = reserva.Guests,
                    RoomId = room.RoomId,
                    Email = reserva.Email
                };

            if (!await ReservasService.HasOverlapAsync(test))
            {
                selectedRoomId = room.RoomId;
                return;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        await AutoAssignRoom();
        if (selectedRoomId == -1)
        {
            errorMessage = "No rooms available.";
            return;
        }

        var selectedPackage = packages.FirstOrDefault(p => p.Name == pkgName);
        if (selectedPackage == null)
        {
            errorMessage = "Invalid package selected.";
            return;
        }

        var nights = (reserva.CheckOut - reserva.CheckIn).Days;
        reserva.RoomId = selectedRoomId;
        reserva.TotalCost = selectedPackage.PricePerNightPerGuest * reserva.Guests * nights;

        var newReservaId = await ReservasService.SaveReserva(reserva);

        var costEntry = new ReservationCost
            {
                ReservaId = newReservaId,
                Cost = reserva.TotalCost,
                RecordedAt = DateTime.UtcNow
            };
        await ReservasService.SaveReservationCost(costEntry);

        // …show confirmation…
    }
}