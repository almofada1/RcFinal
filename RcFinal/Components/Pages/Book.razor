@page "/book"
@layout HotelLayout
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using RcFinal.Models
@using System.Security.Claims
@inject ReservasService ReservasService
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService
@inject NavigationManager Nav

<PageTitle>Book</PageTitle>

<div class="booking-form">
    <h3>Booking Your Hotel</h3>
    <EditForm Model="reserva" OnValidSubmit="HandleValidSubmit" FormName="ReservaForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="check-date">
            <label for="date-in">Check In:</label>
            <InputDate @bind-Value="reserva.CheckIn" min="@MinInDate.ToString("yyyy-MM-dd")" id="date-in" class="form-control" />
        </div>

        <div class="check-date">
            <label for="date-out">Check Out:</label>
            <InputDate @bind-Value="reserva.CheckOut" min="@MinOutDate.ToString("yyyy-MM-dd")" id="date-out" class="form-control" />
        </div>

        <div class="select-option mb-3">
            <label for="guest">Guests:</label>
            <InputNumber @bind-Value="reserva.Guests"
                         id="guest"
                         class="form-control"
                         min="1"
                         max="5" />
            <ValidationMessage For="@(() => reserva.Guests)" />
        </div>

        <div class="mb-3">
            <label for="package">Package:</label>
            <InputSelect @bind-Value="reserva.PackageId" class="form-control">
                @foreach (var pkg in packages)
                {
                    <option value="@pkg.PackageId">@pkg.Name (@pkg.PricePerNightPerGuest € / night / guest)</option>
                }
            </InputSelect>

            <ValidationMessage For="@(() => reserva.PackageId)" />
        </div>

        <button type="submit" class="btn btn-primary">Book now</button>
    </EditForm>
</div>

@code {
    private string? errorMessage;
    private List<Package> packages = new();
    private List<Quartos> rooms = new();
    private int selectedRoomId = -1;

    [SupplyParameterFromForm]
    private Reservas reserva { get; set; } = new()
        {
            CheckIn = DateTime.Today.AddDays(1),
            CheckOut = DateTime.Today.AddDays(2),
            Guests = 1,
            PackageId = "1",
            EstadoId = 1
        };
    private DateTime MinInDate => DateTime.Today.AddDays(1);
    private DateTime MinOutDate => DateTime.Today.AddDays(2);

    protected override async Task OnInitializedAsync()
    {
        rooms = (await ReservasService.GetQuartosAsync()).ToList();
        packages = (await ReservasService.GetPackagesAsync()).ToList();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            reserva.Email = user.FindFirst(ClaimTypes.Email)?.Value
                           ?? user.Identity.Name
                           ?? throw new InvalidOperationException("Authenticated user has no email claim.");
        }
    }

    private async Task HandleValidSubmit()
    {
        // 1. Enforce at least one night:
        if (reserva.CheckOut <= reserva.CheckIn)
        {
            errorMessage = "Check-out must be at least one day after check-in.";
            ToastService.ShowWarning(errorMessage);
            return;
        }

        // 2. Now try to auto-assign a room
        selectedRoomId = await ReservasService.FindAvailableRoomAsync(reserva);
        if (selectedRoomId == -1)
        {
            errorMessage = "No rooms available.";
            ToastService.ShowError(errorMessage);
            return;
        }

        // 3. Package selected?
        if (string.IsNullOrWhiteSpace(reserva.PackageId))
        {
            errorMessage = "Please select a package.";
            ToastService.ShowWarning(errorMessage);
            return;
        }

        var selectedPackage = packages.FirstOrDefault(p => p.PackageId == reserva.PackageId);
        if (selectedPackage == null)
        {
            errorMessage = "Invalid package selected.";
            ToastService.ShowWarning(errorMessage);
            return;
        }

        var total = ReservasService.CalculateTotalCost(reserva, selectedPackage);
        reserva.RoomId = selectedRoomId;
        reserva.TotalCost = total;
        
           // persist reserva
        var newReservaId = await ReservasService.SaveReserva(reserva);
        
        Nav.NavigateTo("/?bookingSuccess=true");
    }
}